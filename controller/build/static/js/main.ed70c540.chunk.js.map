{"version":3,"sources":["components/wrapper/wrapper.js","components/charCard/charCard.js","components/Header/Header.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Wrapper","props","react_default","a","createElement","className","children","CharCard","value","id","onClick","handleClick","alt","name","src","image","Header","currentScore","topScore","win","App","state","Chars","alreadyClicked","show","console","log","_this","includes","setState","handleReset","handleScore","concat","Object","toConsumableArray","handleClose","newScroe","handleShuffle","shuffledChar","arra1","temp","index","ctr","length","Math","floor","random","shuffle","_this2","this","components_Header_Header","wrapper_wrapper","map","char","charCard_charCard","key","Modal","onHide","closeButton","Title","Body","Footer","Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ed70c540.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./charCard.css\";\r\n\r\nconst CharCard = props => (\r\n    <div \r\n      className=\"card\" \r\n      value={props.id} \r\n      onClick={() => props.handleClick(props.id)}\r\n    >\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n  export default CharCard;","import React from \"react\";\r\nimport \"./jumbotron.css\";\r\n\r\nconst Header = props => {\r\n\r\nreturn( <div className=\"jumbotron\">\r\n  <h1 className=\"display-4\">Clicky Game!</h1>\r\n  <p className=\"lead\">Click on any image to score! Don't click twice-you will get in trouble.</p>\r\n  <hr className=\"my-4\"/>\r\n \r\n  \r\n  <div className=\"col-md-4 scores lead\">Current Score: {props.currentScore} </div>\r\n  <div className=\"col-md-4 scores lead\" >Top Score: {props.topScore} </div>\r\n  <div className=\"col-md-4 scores lead\" >{props.win}</div>\r\n</div> )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/wrapper\";\nimport CharCard from \"./components/charCard\";\nimport Header from \"./components/Header\";\nimport Chars from \"./char.json\"\nimport { Button, Modal } from 'react-bootstrap';\n\nfunction shuffle(arra1) {\n  let ctr = arra1.length, temp, index;\n\n// While there are elements in the array\n  while (ctr > 0) {\n// Pick a random index\n      index = Math.floor(Math.random() * ctr);\n// Decrease ctr by 1\n      ctr--;\n// And swap the last element with it\n      temp = arra1[ctr];\n      arra1[ctr] = arra1[index];\n      arra1[index] = temp;\n  }\n  return arra1;\n}\n\nclass App extends Component {\n  // Set sate\n  state = {\n    Chars,\n    currentScore: 0,\n    topScore: 0,\n    alreadyClicked: [],\n    win: \"\",\n    show: false\n  }\n\n  //when a user clicks the image follwing code is run\n  handleClick = id => {\n    console.log(\"I was clicked\")\n    if(!this.state.alreadyClicked.includes(id)){\n      this.handleScore();\n      this.setState({ alreadyClicked:[...this.state.alreadyClicked, id] })\n    }\n    else {\n      \n      this.setState({show: true})\n      this.handleReset();\n    }\n    console.log(this.state);\n  }\n  handleClose = () => {\n    this.setState({show: false})\n  }\n\n  handleScore = () => {\n\n    const newScroe = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScroe\n    });\n\n    if(newScroe >= this.topScore) {\n      this.setState({\n        topScore: newScroe\n      });\n    }\n    else if (newScroe == 12) {\n      this.setState({\n        win: \"You got it! Let's play again\"\n      })\n    }\n    this.handleShuffle();\n  }\n\n  handleReset = () => {\n    this.setState({\n    currentScore: 0,\n    topScore: this.state.topScore,\n    alreadyClicked: [],\n    win: \"\"\n\n    })\n\n    this.handleShuffle();\n  }\n\n  handleShuffle = () => {\n    let shuffledChar = shuffle(Chars);\n    this.setState({ Chars: shuffledChar});\n  }\n  render() {\n    return (\n      <div>\n      <Header currentScore = {this.state.currentScore}  topScore = {this.state.topScore} win ={this.state.win}/>\n        \n    \n    <Wrapper>\n    \n\n      {this.state.Chars.map(char => (\n        <CharCard\n          key = {char.id}\n          id = {char.id}\n          image = {char.image}\n          handleClick = {this.handleClick}\n        />\n      ))\n      }\n    </Wrapper>\n    <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Clicky Game</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              <h1>You lose</h1>\n           \n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={this.handleClose}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}